# Syncronization issues
## Connections
Example
	connect → 0
	msg 0 a
	connect → 1
	msg 1 b
	connect → 2
	msg 2 c

When new clients connect, they will need all old messages or a state snapshot.
	This doesn't affect Sync.hs as it's a network thingy.

## Disconnections
The only thing we really need to change is that we only look at messages from
	active clients.
		That means we need to keep track of a list of active clients.

## Dropped Messages
Google does not guarentee that all messages will be delivered.
Here's an idea. Every time there's a sync, each client sends out the number
	of messages they saw for the last timestamp. If it's not consistent, then
		clients re-send all of their messages for that timestamp.
			We would need to give messages IDs so that they could be kept track of.

He's another idea.
	Every message is tagged with the number of messages that a client is
		sending for that time.
			We can syncronize immediatly when we've got all of these messages.
				We don't need to wait for the next time.
			If we are backed up because we don't have a message
				from a client, we can request that it be re-sent.
			This also gives an order for messages within a time-window.
				Yeah, sounds good. Let's reimplement using this approach.

## Handling Conflicting Messages
Easy, but bad approach: If multiple clients send messages during a time window,
	reject them all.
		If this works well enough, then keep it.

More correct, hard approach:
	Determine if messages can be patched to work with each other.
	Every time we apply a message,
		patch the rest of the messages for that time period.
			I think this should mostly be moving node addresses around.
